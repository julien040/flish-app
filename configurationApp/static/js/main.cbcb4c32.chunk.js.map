{"version":3,"sources":["reportWebVitals.ts","serviceWorker.ts","components/layout.tsx","pages/accueil.tsx","pages/extensionStore.tsx","pages/extensionManager.jsx","pages/extensionManagerId.jsx","pages/extensionStoreId.jsx","pages/installationStatus.jsx","pages/profileNew.tsx","pages/profileUpdate.tsx","pages/settingsPage.tsx","pages/dev.jsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","props","settings","url","useLocation","navigate","useNavigate","align","justify","height","width","backgroundColor","direction","p","Logo","color","pathname","fontWeight","fontSize","marginTop","_focusWithin","outline","borderRadius","cursor","onClick","startsWith","on","_focus","borderWidth","borderColor","_focusVisible","open","size","padding","paddingTop","minW","children","fill","xmlns","d","gap","getGreetings","overflowY","wrap","marginRight","marginLeft","_hover","as","overflow","boxSize","textAlign","marginBottom","hour","Date","getHours","extensionApiURL","admin","getConfig","useState","Data","setData","Extension","setExtension","useEffect","a","getExtensions","axios","get","data","length","isIndeterminate","href","target","isExternal","console","log","sx","scrollbar","map","uuid","src","icon","name","str","description","n","substring","undefined","find","extensions","setExtensions","res","margin","extension","image","id","ItemList","tabIndex","transition","Instances","setInstances","extensionId","useParams","getExtension","getAllInstances","key","instances","ToSave","Object","hasOwnProperty","call","element","extensionID","push","instance","instanceID","alreadyInstalled","setAlreadyInstalled","useSWR","fetch","json","err","alt","header","author","textSuggestion","toast","useToast","currentlyInstalling","setCurrentlyInstalling","useDisclosure","isOpen","onOpen","onClose","useNavigationType","visibility","isCentered","closeOnOverlayClick","closeOnEsc","display","flexDirection","permissions","explaination","status","variant","mr","installExtension","Promise","resolve","setTimeout","title","duration","catch","e","message","envVariable","FormValue","setFormValue","reject","alignSelf","isInvalid","isRequired","htmlFor","value","onChange","defaultValue","envVariables","placeholder","type","needToBeEncrypted","handleSubmit","storedValue","extensionVariable","dataToSaved","toPush","i","createInstance","error","getInstance","getEnvVariable","prototype","instanceId","updateInstance","Shortcut","setShortcut","U","setU","S","setS","getSettings","shortcut","isClosable","setTelemetry","autoFocus","setSecurityLog","URLValue","setURLValue","URLInvalid","setURLInvalid","mockAPI","setMockAPI","mockAPIInvalid","setMockAPIInvalid","Query","setQuery","Headless","setHeadless","getURLDevMode","getMockDevMode","mockDevMode","JSON","stringify","getQueryDevMode","query","getHeadlessDevMode","headless","saveData","setURLDevMode","setMockDevMode","setQueryDevMode","setHeadlessDevMode","isChecked","parse","isDisabled","ReactDOM","render","theme","flishTheme","path","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cbcb4c32.chunk.js","sourcesContent":["import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","/*\r\n * File: \\src\\components\\layout.tsx\r\n * Project: configuration\r\n * Created Date: Wednesday December 15th 2021\r\n * Author: Julien Cagniart\r\n * -----\r\n * Last Modified: 17/12/2021 12:11\r\n * Modified By: Julien Cagniart\r\n * -----\r\n * Copyright (c) 2021 Julien - juliencagniart40@gmail.com\r\n * -----\r\n * _______ _ _      _                 _             \r\n(_______) (_)    | |               | |            \r\n _____  | |_  ___| | _           _ | | ____ _   _ \r\n|  ___) | | |/___) || \\         / || |/ _  ) | | |\r\n| |     | | |___ | | | |   _   ( (_| ( (/ / \\ V / \r\n|_|     |_|_(___/|_| |_|  (_)   \\____|\\____) \\_/  \r\n                                                   \r\n * Purpose of this file : \r\n *  Link to documentation associated with this file : (empty) \r\n */\r\nimport { Flex, Box, Text, Button } from \"@chakra-ui/react\";\r\nimport { useLocation, useNavigate, Link } from \"react-router-dom\";\r\n\r\nexport default (props: any) => {\r\n  const settings = {\r\n    accentuationColor: \"flish.800\",\r\n    accentuationWeight: 700,\r\n  };\r\n\r\n  //I hate typescript sometimes, especially when it talks about JSX and React\r\n  const url = useLocation();\r\n  const navigate = useNavigate();\r\n  return (\r\n    <Flex\r\n      align={\"center\"}\r\n      justify={\"center\"}\r\n      height={\"100vh\"}\r\n      width={\"100vw\"}\r\n      backgroundColor={\"flish.200\"}\r\n    >\r\n      <Flex\r\n        direction={\"column\"}\r\n        align={\"center\"}\r\n        justify={\"center\"}\r\n        width={[\"150px\", \"250px\"]}\r\n        height={\"70vh\"}\r\n        p={4}\r\n      >\r\n        <Box>\r\n          {Logo}\r\n          <Text\r\n            color={\r\n              url.pathname === \"/\"\r\n                ? settings.accentuationColor\r\n                : \"blackAlpha.600\"\r\n            }\r\n            fontWeight={settings.accentuationWeight}\r\n            fontSize={14}\r\n            marginTop={4}\r\n            _focusWithin={{\r\n              outline: \"none\",\r\n              backgroundColor: \"flish.400\",\r\n              borderRadius: \"4px\",\r\n            }}\r\n            cursor={\"pointer\"}\r\n            onClick={() => navigate(\"/\")}\r\n          >\r\n            Home\r\n          </Text>\r\n          <Text\r\n            color={\r\n              url.pathname.startsWith(\"/store\")\r\n                ? settings.accentuationColor\r\n                : \"blackAlpha.600\"\r\n            }\r\n            fontWeight={settings.accentuationWeight}\r\n            fontSize={14}\r\n            _focusWithin={{\r\n              outline: \"none\",\r\n              backgroundColor: \"flish.400\",\r\n              borderRadius: \"4px\",\r\n            }}\r\n            cursor={\"pointer\"}\r\n            onClick={() => navigate(\"/store\")}\r\n          >\r\n            Extension Store\r\n          </Text>\r\n          <Text\r\n            color={\r\n              url.pathname.startsWith(\"/extensionManager\") ||\r\n              url.pathname.startsWith(\"/profile\")\r\n                ? settings.accentuationColor\r\n                : \"blackAlpha.600\"\r\n            }\r\n            fontWeight={settings.accentuationWeight}\r\n            fontSize={14}\r\n            _focusWithin={{\r\n              outline: \"none\",\r\n              backgroundColor: \"flish.400\",\r\n              borderRadius: \"4px\",\r\n            }}\r\n            cursor={\"pointer\"}\r\n            onClick={() => navigate(\"/extensionManager\")}\r\n            on\r\n          >\r\n            Manage extensions\r\n          </Text>\r\n          <Text\r\n            cursor={\"pointer\"}\r\n            color={\r\n              url.pathname.startsWith(\"/settings\")\r\n                ? settings.accentuationColor\r\n                : \"blackAlpha.600\"\r\n            }\r\n            fontWeight={settings.accentuationWeight}\r\n            fontSize={14}\r\n            _focusWithin={{\r\n              outline: \"none\",\r\n              backgroundColor: \"flish.400\",\r\n              borderRadius: \"4px\",\r\n            }}\r\n            onClick={() => navigate(\"/settings\")}\r\n            _focus={{ borderWidth: \"1px\", borderColor: \"flish.500\" }}\r\n            _focusVisible={{ borderWidth: \"1px\", borderColor: \"flish.500\" }}\r\n          >\r\n            Settings\r\n          </Text>\r\n          <Text\r\n            cursor={\"pointer\"}\r\n            color={\r\n              url.pathname.startsWith(\"/dev\")\r\n                ? settings.accentuationColor\r\n                : \"blackAlpha.600\"\r\n            }\r\n            fontWeight={settings.accentuationWeight}\r\n            fontSize={14}\r\n            _focusWithin={{\r\n              outline: \"none\",\r\n              backgroundColor: \"flish.400\",\r\n              borderRadius: \"4px\",\r\n            }}\r\n            onClick={() => navigate(\"/dev\")}\r\n            _focus={{ borderWidth: \"1px\", borderColor: \"flish.500\" }}\r\n            _focusVisible={{ borderWidth: \"1px\", borderColor: \"flish.500\" }}\r\n          >\r\n            Developer mode\r\n          </Text>\r\n          <Text\r\n            fontWeight={settings.accentuationWeight}\r\n            fontSize={14}\r\n            onClick={() => window.open(\"https://flish.dev\")}\r\n            cursor={\"pointer\"}\r\n            _focusWithin={{\r\n              outline: \"none\",\r\n              backgroundColor: \"flish.400\",\r\n              borderRadius: \"4px\",\r\n            }}\r\n            color={\"blackAlpha.600\"}\r\n          >\r\n            Go to website\r\n          </Text>\r\n        </Box>\r\n        <Box></Box>\r\n        <Button marginTop={8} size={\"sm\"} onClick={() => navigate(-1)}>\r\n          ←\r\n        </Button>\r\n      </Flex>\r\n      <Box\r\n        padding={\"24px\"}\r\n        paddingTop={\"96px\"}\r\n        height={\"100%\"}\r\n        minW={\"900px\"}\r\n        width={\"900px\"}\r\n      >\r\n        {props.children}\r\n      </Box>\r\n      <Box width={\"250px\"}></Box>\r\n    </Flex>\r\n  );\r\n};\r\n\r\nconst Logo = (\r\n  <svg width=\"141\" height=\"30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <path\r\n      d=\"M20.448 25.652c0 .984.18 1.668.54 2.052.384.36 1.044.54 1.98.54V29c-2.592-.096-4.26-.144-5.004-.144-.744 0-2.412.048-5.004.144v-.756c.864 0 1.464-.18 1.8-.54.336-.384.504-1.068.504-2.052V4.664c0-1.104-.228-1.884-.684-2.34-.24-.264-.564-.468-.972-.612a3.457 3.457 0 0 0-1.224-.216c-.648 0-1.2.108-1.656.324a3.147 3.147 0 0 0-1.152.9c-.48.528-.792 1.2-.936 2.016-.12.816-.18 2.052-.18 3.708v1.98h3.78v.72H8.46v14.508c0 .984.24 1.668.72 2.052.48.36 1.2.54 2.16.54V29l-.936-.036c-2.376-.072-3.852-.108-4.428-.108-.768 0-2.268.036-4.5.108a5.443 5.443 0 0 1-.72.036v-.756c.936 0 1.584-.18 1.944-.54.384-.384.576-1.068.576-2.052V11.144H.612v-.72h2.664c0-1.824.204-3.348.612-4.572.408-1.248 1.068-2.268 1.98-3.06a7.558 7.558 0 0 1 2.736-1.476 11.01 11.01 0 0 1 3.204-.468c.48 0 1.224.048 2.232.144 1.152.096 2.064.144 2.736.144 1.128 0 2.352-.12 3.672-.36v24.876ZM29.098 1.1c1.009 0 1.8.252 2.377.756.6.48.9 1.152.9 2.016 0 .864-.3 1.548-.9 2.052-.576.48-1.368.72-2.376.72-1.008 0-1.812-.24-2.412-.72-.576-.504-.864-1.188-.864-2.052 0-.864.288-1.536.864-2.016.6-.504 1.404-.756 2.412-.756Zm2.809 24.552c0 .984.168 1.668.504 2.052.36.36.96.54 1.8.54V29c-2.4-.096-3.996-.144-4.788-.144-.744 0-2.412.048-5.004.144v-.756c.864 0 1.464-.18 1.8-.54.336-.384.504-1.068.504-2.052v-11.34c0-1.104-.168-1.908-.504-2.412-.336-.504-.936-.756-1.8-.756v-.756c.768.072 1.512.108 2.232.108 2.136 0 3.888-.168 5.256-.504v15.66ZM42.902 9.884c.912 0 1.752.12 2.52.36.768.216 1.356.468 1.764.756.24.168.456.252.648.252.216 0 .396-.108.54-.324.168-.24.276-.576.324-1.008h.756c-.096 1.224-.144 3.336-.144 6.336h-.756c-.216-1.584-.696-2.904-1.44-3.96-.72-1.08-1.776-1.62-3.168-1.62-.72 0-1.32.204-1.8.612-.456.408-.684.972-.684 1.692 0 .816.276 1.524.828 2.124.552.576 1.416 1.284 2.592 2.124l1.044.756c1.464 1.104 2.544 2.088 3.24 2.952.696.864 1.044 1.944 1.044 3.24 0 1.056-.312 1.992-.936 2.808-.6.816-1.416 1.44-2.448 1.872-1.032.432-2.172.648-3.42.648-1.32 0-2.448-.252-3.384-.756-.768-.384-1.32-.636-1.656-.756-.24-.072-.456.012-.648.252-.168.216-.3.552-.396 1.008h-.756c.096-1.368.144-3.768.144-7.2h.756c.48 4.416 2.1 6.624 4.86 6.624.696 0 1.284-.204 1.764-.612.504-.432.756-1.08.756-1.944 0-.672-.156-1.272-.468-1.8a5.239 5.239 0 0 0-1.116-1.404 46.61 46.61 0 0 0-2.052-1.692c-1.08-.864-1.908-1.56-2.484-2.088a8.082 8.082 0 0 1-1.44-1.872c-.384-.72-.576-1.524-.576-2.412 0-1.536.6-2.748 1.8-3.636 1.2-.888 2.664-1.332 4.392-1.332Zm16.81 3.348c1.08-2.232 3.035-3.348 5.867-3.348 1.872 0 3.192.468 3.96 1.404.408.456.696 1.056.864 1.8.192.72.288 1.68.288 2.88v9.684c0 .984.168 1.668.504 2.052.336.36.936.54 1.8.54V29c-2.496-.096-4.08-.144-4.752-.144-.816 0-2.376.048-4.68.144v-.756c.72 0 1.224-.18 1.512-.54.288-.384.432-1.068.432-2.052V14.456c0-.984-.168-1.728-.504-2.232-.312-.504-.888-.756-1.728-.756-1.008 0-1.86.396-2.556 1.188-.672.768-1.008 1.752-1.008 2.952v10.044c0 .984.144 1.668.432 2.052.288.36.792.54 1.512.54V29c-2.304-.096-3.792-.144-4.464-.144-.816 0-2.472.048-4.968.144v-.756c.84 0 1.428-.18 1.764-.54.36-.384.54-1.068.54-2.052V5.168c0-1.104-.18-1.908-.54-2.412-.336-.504-.924-.756-1.764-.756v-.756c.768.072 1.512.108 2.232.108 2.088 0 3.84-.168 5.256-.504v12.384Z\"\r\n      fill=\"#000\"\r\n    />\r\n    <path\r\n      d=\"M78.301 23.96c.936 0 1.68.252 2.232.756.552.48.828 1.152.828 2.016 0 .864-.276 1.548-.828 2.052-.552.48-1.296.72-2.232.72-.936 0-1.68-.24-2.232-.72-.552-.504-.828-1.188-.828-2.052 0-.864.276-1.536.828-2.016.552-.504 1.296-.756 2.232-.756Zm23.42 1.08c0 1.104.168 1.908.504 2.412.336.504.936.756 1.8.756v.756a23.159 23.159 0 0 0-2.232-.108c-2.137 0-3.889.168-5.257.504v-3.096c-.816 2.16-2.376 3.24-4.68 3.24-2.255 0-4.055-.816-5.4-2.448-1.32-1.656-1.968-4.14-1.944-7.452 0-2.112.337-3.888 1.008-5.328.697-1.464 1.645-2.556 2.845-3.276 1.224-.744 2.616-1.116 4.175-1.116 1.752 0 3.084.456 3.996 1.368v-6.12c0-1.104-.18-1.908-.54-2.412-.335-.504-.923-.756-1.763-.756v-.756c.767.072 1.511.108 2.231.108 2.088 0 3.841-.168 5.257-.504V25.04Zm-8.389 2.916c.793 0 1.489-.288 2.089-.864.623-.576.995-1.356 1.115-2.34v-12.6c-.6-.816-1.475-1.224-2.627-1.224-1.273 0-2.257.732-2.953 2.196-.696 1.464-1.032 3.648-1.008 6.552-.023 2.928.253 5.04.829 6.336.6 1.296 1.451 1.944 2.555 1.944Zm22.776-1.404c1.968 0 3.552-.96 4.752-2.88l.648.216c-.48 1.56-1.344 2.892-2.592 3.996-1.224 1.08-2.76 1.62-4.608 1.62-2.544 0-4.572-.804-6.084-2.412-1.488-1.632-2.232-4.032-2.232-7.2 0-3.24.804-5.712 2.412-7.416 1.608-1.728 3.744-2.592 6.408-2.592 4.512 0 6.768 2.664 6.768 7.992h-10.116c-.024.36-.036.924-.036 1.692 0 1.584.216 2.904.648 3.96.456 1.056 1.032 1.824 1.728 2.304.72.48 1.488.72 2.304.72Zm-1.512-15.912c-.864 0-1.584.54-2.16 1.62-.552 1.056-.9 2.7-1.044 4.932h5.652c.048-1.896-.144-3.456-.576-4.68-.408-1.248-1.032-1.872-1.872-1.872Zm23.333-.144c1.224 0 2.148-.036 2.772-.108v.72c-.504.144-.96.456-1.368.936-.384.456-.756 1.176-1.116 2.16l-5.256 14.868c-.264-.024-.66-.036-1.188-.036-.504 0-.888.012-1.152.036l-6.408-15.912c-.336-.816-.684-1.356-1.044-1.62-.336-.264-.684-.396-1.044-.396v-.756c1.68.12 3.384.18 5.112.18 1.512 0 3.072-.06 4.68-.18v.756c-.816 0-1.404.06-1.764.18-.336.096-.504.384-.504.864 0 .192.06.492.18.9l4.104 10.908 2.592-7.128c.384-1.128.576-2.1.576-2.916 0-1.752-.876-2.7-2.628-2.844v-.72c1.104.072 2.256.108 3.456.108Z\"\r\n      fill=\"#6070FF\"\r\n    />\r\n  </svg>\r\n);\r\n","import { Button, Flex, Heading } from \"@chakra-ui/react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { DownloadIcon, SettingsIcon, EditIcon, AddIcon, LinkIcon, ChatIcon } from \"@chakra-ui/icons\";\r\n\r\nexport default (props: any) => {\r\n  const navigate = useNavigate();\r\n  return (\r\n    <Flex\r\n      gap={\"32px\"}\r\n      height={\"100%\"}\r\n      align=\"center\"\r\n      justify={\"flex-start\"}\r\n      direction={\"column\"}\r\n    >\r\n      <Heading width={\"80%\"}>\r\n        {getGreetings()} <br /> {\"\\n\"} What do you need ?{\" \"}\r\n      </Heading>\r\n      <Flex\r\n        justify={\"flex-start\"}\r\n        align={\"flex-start\"}\r\n        overflowY={\"auto\"}\r\n        gap={\"32px\"}\r\n        wrap={\"wrap\"}\r\n        paddingTop={16}\r\n        width={\"80%\"}\r\n        marginRight={\"auto\"}\r\n        marginLeft={\"auto\"}\r\n      >\r\n        <Flex\r\n          _hover={{ backgroundColor: \"flish.400\" }}\r\n          gap={3}\r\n          p={5}\r\n          backgroundColor={\"flish.300\"}\r\n          borderRadius={\"12px\"}\r\n          direction={\"column\"}\r\n          as=\"button\"\r\n          width={\"45%\"}\r\n          onClick={() => navigate(\"/store\")}\r\n        >\r\n          <DownloadIcon\r\n            borderRadius={60}\r\n            p={4}\r\n            overflow={\"visible\"}\r\n            color={\"flish.700\"}\r\n            backgroundColor={\"flish.200\"}\r\n            boxSize={\"64px\"}\r\n          />\r\n          <Heading textAlign={\"left\"} marginBottom={\"auto\"} fontSize={24}>\r\n            I want a new extension\r\n          </Heading>\r\n        </Flex>\r\n        <Flex\r\n          _hover={{ backgroundColor: \"flish.400\" }}\r\n          gap={3}\r\n          p={5}\r\n          backgroundColor={\"flish.300\"}\r\n          borderRadius={\"12px\"}\r\n          direction={\"column\"}\r\n          as=\"button\"\r\n          width={\"48%\"}\r\n          onClick={() => navigate(\"/extensionManager\")}\r\n        >\r\n          <EditIcon\r\n            borderRadius={60}\r\n            p={4}\r\n            overflow={\"visible\"}\r\n            color={\"flish.700\"}\r\n            backgroundColor={\"flish.200\"}\r\n            boxSize={\"64px\"}\r\n          />\r\n          <Heading textAlign={\"left\"} marginBottom={\"auto\"} fontSize={24}>\r\n            I want to manage my extensions\r\n          </Heading>\r\n        </Flex>\r\n        <Flex\r\n          _hover={{ backgroundColor: \"flish.400\" }}\r\n          gap={3}\r\n          p={5}\r\n          backgroundColor={\"flish.300\"}\r\n          borderRadius={\"12px\"}\r\n          direction={\"column\"}\r\n          as=\"button\"\r\n          width={\"45%\"}\r\n          onClick={() => navigate(\"/settings\")}\r\n        >\r\n          <SettingsIcon\r\n            borderRadius={60}\r\n            p={4}\r\n            overflow={\"visible\"}\r\n            color={\"flish.700\"}\r\n            backgroundColor={\"flish.200\"}\r\n            boxSize={\"64px\"}\r\n          />\r\n          <Heading textAlign={\"left\"} marginBottom={\"auto\"} fontSize={24}>\r\n            I want to change settings\r\n          </Heading>\r\n        </Flex>\r\n        <Flex\r\n          _hover={{ backgroundColor: \"flish.400\" }}\r\n          gap={3}\r\n          p={5}\r\n          backgroundColor={\"flish.300\"}\r\n          borderRadius={\"12px\"}\r\n          direction={\"column\"}\r\n          as=\"button\"\r\n          width={\"45%\"}\r\n          onClick={() => navigate(\"/dev\")}\r\n        >\r\n          <SettingsIcon\r\n            borderRadius={60}\r\n            p={4}\r\n            overflow={\"visible\"}\r\n            color={\"flish.700\"}\r\n            backgroundColor={\"flish.200\"}\r\n            boxSize={\"64px\"}\r\n          />\r\n          <Heading textAlign={\"left\"} marginBottom={\"auto\"} fontSize={24}>\r\n            I want to create my own extension\r\n          </Heading>\r\n        </Flex>\r\n        <Flex\r\n          _hover={{ backgroundColor: \"flish.400\" }}\r\n          gap={3}\r\n          p={5}\r\n          backgroundColor={\"flish.300\"}\r\n          borderRadius={\"12px\"}\r\n          direction={\"column\"}\r\n          as=\"button\"\r\n          width={\"45%\"}\r\n          onClick={() => window.open(\"https://flish.dev\")}\r\n        >\r\n          <LinkIcon\r\n            borderRadius={60}\r\n            p={4}\r\n            overflow={\"visible\"}\r\n            color={\"flish.700\"}\r\n            backgroundColor={\"flish.200\"}\r\n            boxSize={\"64px\"}\r\n          />\r\n          <Heading textAlign={\"left\"} marginBottom={\"auto\"} fontSize={24}>\r\n            I want to go to Flish website\r\n          </Heading>\r\n        </Flex>\r\n        <Flex\r\n          _hover={{ backgroundColor: \"flish.400\" }}\r\n          gap={3}\r\n          p={5}\r\n          backgroundColor={\"flish.300\"}\r\n          borderRadius={\"12px\"}\r\n          direction={\"column\"}\r\n          as=\"button\"\r\n          width={\"45%\"}\r\n          onClick={() => window.open(\"https://flish.dev/contact\")}\r\n        >\r\n          <ChatIcon\r\n            borderRadius={60}\r\n            p={4}\r\n            overflow={\"visible\"}\r\n            color={\"flish.700\"}\r\n            backgroundColor={\"flish.200\"}\r\n            boxSize={\"64px\"}\r\n          />\r\n          <Heading textAlign={\"left\"} marginBottom={\"auto\"} fontSize={24}>\r\n            I want some support or give feedback\r\n          </Heading>\r\n        </Flex>\r\n        \r\n      </Flex>\r\n    </Flex>\r\n  );\r\n};\r\n\r\nconst getGreetings = () => {\r\n  let now = new Date();\r\n  let hour = now.getHours();\r\n  if (hour < 12 && hour >= 5) {\r\n    return \"Good Morning\";\r\n  } else if (hour < 18) {\r\n    return \"Good Afternoon\";\r\n  } else if (hour < 22) {\r\n    return \"Good Evening\";\r\n  }\r\n  return \"Good Night\";\r\n};\r\n","\r\nimport {\r\n  Flex,\r\n  Heading,\r\n  Text,\r\n  CircularProgress,\r\n  Image,\r\n  Link,\r\n} from \"@chakra-ui/react\";\r\nimport { CheckIcon } from \"@chakra-ui/icons\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useState, Fragment } from \"react\";\r\n\r\nconst { extensionApiURL } = window.admin.getConfig();\r\nexport default () => {\r\n  const [Data, setData]: [Data: any, setData: Function] = useState([]);\r\n  const [Extension, setExtension]: [any[], Function] = useState([]);\r\n  const navigate = useNavigate();\r\n  useEffect(() => {\r\n    (async () => {\r\n      setExtension(await window.admin.getExtensions());\r\n      const { data } = await axios.get(extensionApiURL);\r\n      setData(data);\r\n    })();\r\n  }, []);\r\n  if (Data.length === 0) {\r\n    return (\r\n      <Flex\r\n        gap={4}\r\n        height={\"100%\"}\r\n        justify={\"center\"}\r\n        align={\"center\"}\r\n        direction={\"column\"}\r\n        \r\n      >\r\n        <Heading fontSize={22}>Fetching extensions from marketplace</Heading>\r\n        <CircularProgress color=\"flish.700\" isIndeterminate />\r\n        <Text textAlign={\"center\"} width={\"30%\"}>\r\n          If this takes too long, check your internet connection or\r\n          <Link href=\"http://status.flish.dev\" target=\"_blank\" isExternal>\r\n            {\" \"}\r\n            Flish Status\r\n          </Link>\r\n        </Text>\r\n      </Flex>\r\n    );\r\n  } else {\r\n    console.log(Extension);\r\n    return (\r\n      <Flex width={\"100%\"} height={\"100%\"} direction={\"column\"}>\r\n        <Heading marginBottom={8} fontSize={20}>\r\n          Find a new extension\r\n        </Heading>\r\n        <Flex\r\n          overflowY={\"auto\"}\r\n          width={\"100%\"}\r\n          gap={4}\r\n          wrap={\"wrap\"}\r\n          sx={scrollbar}\r\n        >\r\n          {Data.map((d: any) => (\r\n            <Flex\r\n              direction={\"column\"}\r\n              width={\"32%\"}\r\n              padding={\"24px\"}\r\n              backgroundColor={\"flish.100\"}\r\n              borderRadius={\"12px\"}\r\n              cursor={\"pointer\"}\r\n              onClick={() => navigate(`/store/${d.uuid}`)}\r\n              key={d.uuid}\r\n              /* tabIndex={0}\r\n              role={\"button\"} */\r\n            >\r\n              <Image\r\n                src={d.icon}\r\n                width={\"48px\"}\r\n                height={\"48px\"}\r\n                borderRadius={100}\r\n              />\r\n              <Heading marginTop={\"24px\"} fontSize={18}>\r\n                {d.name}\r\n              </Heading>\r\n              <Text marginBottom={4} marginTop={\"12px\"} fontSize={14}>\r\n                {truncate(d.description, 80)}\r\n              </Text>\r\n              {Extension.find((a) => a.uuid === d.uuid) === undefined ? ( //If extension is installed\r\n                <Text></Text>\r\n              ) : (\r\n                <Flex marginTop={\"auto\"} align={\"center\"} gap={2} >\r\n                  <CheckIcon />{\" \"}\r\n                  <Text color={\"flish.700\"} fontWeight={700} fontSize={14}>\r\n                    Installed\r\n                  </Text>\r\n                </Flex>\r\n              )}\r\n            </Flex>\r\n          ))}\r\n        </Flex>\r\n      </Flex>\r\n    );\r\n  }\r\n};\r\n\r\ndeclare global {\r\n  interface Window {\r\n    admin: any;\r\n  }\r\n}\r\n//https://stackoverflow.com/questions/1199352/smart-way-to-truncate-long-strings\r\nfunction truncate(str: string, n: number) {\r\n  return str.length > n ? str.substring(0, n) + \"...\" : str;\r\n}\r\n\r\nconst scrollbar = {\r\n  \"::-webkit-scrollbar\": {\r\n    backgroundColor: \"transparent\",\r\n    width: \"6px\",\r\n  },\r\n  \"::-webkit-scrollbar-thumb\": {\r\n    backgroundColor: \"#B9B4FF\",\r\n    borderRadius: \"6px\",\r\n  },\r\n};\r\nexport { scrollbar };\r\n","\r\nimport { Flex, Heading, Text, Image, Tooltip, Link, Button } from \"@chakra-ui/react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { InfoIcon } from \"@chakra-ui/icons\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { scrollbar } from \"./extensionStore\";\r\nexport default () => {\r\n  const navigate = useNavigate();\r\n  const [extensions, setExtensions] = useState([]);\r\n  useEffect(() => {\r\n    (async () => {\r\n      const res = await window.admin.getExtensions();\r\n      setExtensions(res);\r\n    })();\r\n  }, []);\r\n  return (\r\n    <Flex paddingTop={\"48px\"} margin={\"auto\"} direction={\"column\"} width={\"80%\"} height={\"100%\"}>\r\n      <Heading marginBottom={\"32px\"} fontSize={32}>\r\n        Your extensions{\" \"}\r\n      </Heading>\r\n      <Flex height={\"100%\"} overflowY={\"auto\"} direction={\"column\"} gap={\"12px\"} sx={scrollbar}>\r\n        {extensions.map((extension) => (\r\n          <ItemList\r\n            name={extension.name}\r\n            key={extension.id}\r\n            image={extension.icon}\r\n            navigate={navigate}\r\n            id={extension.uuid}\r\n          />\r\n        ))}\r\n        {extensions.length === 0 ? (\r\n          \r\n          <Flex\r\n            direction={\"column\"}\r\n            align={\"center\"}\r\n            justify={\"center\"}\r\n            height={\"100%\"}\r\n            width={\"100%\"}\r\n            gap={4}\r\n          >\r\n            <Text color={\"flish.700\"} fontWeight={600} fontSize={14}>\r\n              😥 You don't have any extensions yet.\r\n            </Text>\r\n            <Button size={\"sm\"} >Download your {'\\n'} first extension</Button>\r\n\r\n\r\n            </Flex>\r\n        ) : (null)}\r\n      </Flex>\r\n      <Text paddingTop={4} fontWeight={500} fontSize={14} margin={\"auto\"}>\r\n        Above is all your extensions installed. You can install more extensions{\" \"}\r\n        <Link /* onClick={navigate(\"/store\")} */>visiting the marketplace</Link>\r\n        . If you want to modify settings, click on an extension\r\n      </Text>\r\n    </Flex>\r\n  );\r\n};\r\n\r\nconst ItemList = ({ name, image, id, navigate }) => (\r\n  <Flex\r\n    tabIndex={0}\r\n    onClick={() => navigate(`/extensionManager/${id}`)}\r\n    width={\"100%\"}\r\n    backgroundColor={\"flish.400\"}\r\n    p={\"16px\"}\r\n    gap={\"10px\"}\r\n    borderRadius={\"12px\"}\r\n    align={\"center\"}\r\n    _hover={{ backgroundColor: \"flish.500\" }}\r\n    _focusWithin={{ borderWidth: 2, outline: \"none\", borderColor: \"flish.600\" }}\r\n    transition={\"transition: opacity 0.5s ease-in-out;\"}\r\n    cursor={\"pointer\"}\r\n/*     role={\"link\"} */\r\n  >\r\n    <Image boxSize={\"24px\"} borderRadius={100} src={image} />\r\n    <Heading fontSize={15}>{name}</Heading>\r\n  </Flex>\r\n);\r\n","\r\nimport { Flex, Text, Image, Link, Heading, Button } from \"@chakra-ui/react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport { scrollbar } from \"./extensionStore\";\r\n\r\nexport default () => {\r\n  const navigate = useNavigate();\r\n  const [Data, setData] = useState(undefined);\r\n  const [Instances, setInstances] = useState(undefined);\r\n  const { extensionId } = useParams();\r\n  useEffect(() => {\r\n    (async () => {\r\n      const data = await window.admin.getExtension(extensionId);\r\n      const instances = await window.admin.getAllInstances();\r\n      let ToSave = [];\r\n      for (const key in instances) {\r\n        if (Object.hasOwnProperty.call(instances, key)) {\r\n          const element = instances[key];\r\n          if (element.extensionID === extensionId) {\r\n            //Be careful, naming convention is bad. API has extensionID, but Front end has extensionId (capitalized ID)\r\n            ToSave.push(element);\r\n          }\r\n        }\r\n      }\r\n      setData(data);\r\n      setInstances(ToSave);\r\n    })();\r\n  }, []);\r\n  if (!Data || !Instances) {\r\n    return <Flex>Loading...</Flex>;\r\n  } else {\r\n    return (\r\n      <Flex\r\n        direction={\"column\"}\r\n        gap={8}\r\n        p={5}\r\n        width={\"80%\"}\r\n        margin={\"auto\"}\r\n        height={\"100%\"}\r\n        justify={\"flex-start\"}\r\n        align={\"flex-start\"}\r\n      >\r\n        <Image borderRadius={100} src={Data.icon} boxSize={24} />\r\n        <Flex\r\n          width={\"100%\"}\r\n          marginTop={\"24px\"}\r\n          gap={\"16px\"}\r\n          direction={\"column\"}\r\n        >\r\n          <Heading fontSize={\"36px\"}>{Data.name} extension</Heading>\r\n          <Text>{Data.description}</Text>\r\n        </Flex>\r\n        <Flex width={\"100%\"} align={\"center\"} justify={\"space-between\"}>\r\n          <Heading color={\"flish.700\"} fontSize={22}>\r\n            Profiles :\r\n          </Heading>\r\n          <Button\r\n            size={\"sm\"}\r\n            onClick={() => navigate(\"/profileNew/\" + extensionId)}\r\n          >\r\n            +\r\n          </Button>\r\n        </Flex>\r\n        <Flex\r\n          sx={scrollbar} //Define a custom scrollbar\r\n          overflowY={\"auto\"}\r\n          gap={4}\r\n          width={\"100%\"}\r\n          direction={\"column\"}\r\n        >\r\n          {Instances.map((instance) => (\r\n            <Flex\r\n              onClick={() => navigate(`/profile/${instance.instanceID}`)}\r\n              p=\"14px\"\r\n              width={\"100%\"}\r\n              _hover={{ backgroundColor: \"flish.500\" }}\r\n              borderRadius={\"12px\"}\r\n              backgroundColor={\"flish.400\"}\r\n              _focusWithin={{ outline: \"none\", backgroundColor: \"flish.500\" }} //Remove outline when focused\r\n              as=\"button\" // Could be clicked\r\n              key={instance.instanceID}\r\n            >\r\n              <Text fontSize={14} fontWeight={600}>\r\n                {instance.name}\r\n              </Text>\r\n            </Flex>\r\n          ))}\r\n          {Instances.length === 0 ? (\r\n            <Flex direction={\"column\"} height={\"100%\"} width={\"100%\"} justify={\"center\"} align={\"center\"} >\r\n              <Text color={\"flish.600\"} fontSize={14}>No profile found</Text>\r\n              <Text color={\"flish.600\"} fontSize={14}>Would you like to create a new profile ?</Text>\r\n              <Button size={\"sm\"} marginTop={4}  onClick={() => navigate(\"/profileNew/\" + extensionId)} >New profile</Button>\r\n            </Flex>\r\n          ) : (null) }\r\n        </Flex>\r\n      </Flex>\r\n    );\r\n  }\r\n};\r\n","\r\nimport { useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport {\r\n  Flex,\r\n  Heading,\r\n  Text,\r\n  CircularProgress,\r\n  Button,\r\n  Link,\r\n  Image,\r\n} from \"@chakra-ui/react\";\r\nimport { CheckIcon } from \"@chakra-ui/icons\";\r\nimport useSWR from \"swr\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { scrollbar } from \"./extensionStore\";\r\n\r\nconst { extensionApiURL } = window.admin.getConfig();\r\nexport default () => {\r\n  const navigate = useNavigate();\r\n  const { extensionId } = useParams();\r\n  const [alreadyInstalled, setAlreadyInstalled] = useState(false);\r\n  window.admin.getExtension(extensionId).then((extension) => {\r\n    if (extension) {\r\n      setAlreadyInstalled(true);\r\n    }\r\n  });\r\n  const fetcher = (...args) => fetch(...args).then((res) => res.json());\r\n  const { data, err } = useSWR(`${extensionApiURL}/${extensionId}`, fetcher);\r\n  if (err)\r\n    return (\r\n      <Flex height={\"100%\"} justify={\"center\"} align={\"center\"}>\r\n        <Text textAlign={\"center\"} width={\"30%\"}>\r\n          We can't fetch Flish Api. Check your internet connection or\r\n          <Text fontWeight={600}>\r\n            {\" \"}\r\n            <Link href=\"https://status.flish.dev\" target=\"_blank\">\r\n              Flish Status\r\n            </Link>\r\n          </Text>\r\n        </Text>\r\n      </Flex>\r\n    );\r\n  if (!data)\r\n    return (\r\n      <Flex\r\n        direction={\"column\"}\r\n        height={\"100%\"}\r\n        justify={\"center\"}\r\n        align={\"center\"}\r\n      >\r\n        <CircularProgress\r\n          marginBottom={8}\r\n          color=\"flish.700\"\r\n          isIndeterminate\r\n          size={10}\r\n        />\r\n        <Text fontWeight={600}>Fetching data...</Text>\r\n      </Flex>\r\n    );\r\n  return (\r\n    <Flex\r\n      height={\"100%\"}\r\n      justify={\"space-between\"}\r\n      direction={\"column\"}\r\n      align={\"center\"}\r\n      overflowY={\"auto\"}\r\n      p={4}\r\n      sx={scrollbar}\r\n    >\r\n      <Flex gap={8} align={\"center\"}>\r\n        <Image\r\n          alt=\"The icon of the extension\"\r\n          src={data.icon}\r\n          size={50}\r\n          borderRadius={100}\r\n        />\r\n        <Heading marginTop={4} fontSize={28}>\r\n          About <Text color={\"flish.800\"}>{data.name}</Text>\r\n        </Heading>\r\n        {alreadyInstalled ? ( //Show a check icon if the extension is already installed, if not return null\r\n          <Flex marginTop={\"auto\"} align={\"center\"} gap={2}>\r\n            <CheckIcon />{\" \"}\r\n            <Text color={\"flish.700\"} fontWeight={700} fontSize={14}>\r\n              Installed\r\n            </Text>\r\n          </Flex>\r\n        ) : null}\r\n      </Flex>\r\n      <Flex\r\n        align=\"center\"\r\n        width={\"80%\"}\r\n        direction={\"column\"}\r\n        gap={4}\r\n        marginTop={8}\r\n        height={\"100%\"}\r\n      >\r\n        <Image\r\n          borderRadius={\"10px\"}\r\n          width={\"546px\"}\r\n          height={\"312px\"}\r\n          src={data.header}\r\n          alt=\"An image showing capabilities of the extension\"\r\n        />\r\n        <Text>{data.description}</Text>\r\n      </Flex>\r\n\r\n      <Flex\r\n        marginBottom={4}\r\n        p={3}\r\n        borderRadius={\"12px\"}\r\n        backgroundColor={\"flish.300\"}\r\n        width={\"80%\"}\r\n        direction={\"column\"}\r\n        gap={4}\r\n        marginTop={8}\r\n      >\r\n        <Link href={`https://flish.dev/store/author/${data.author}`}>\r\n          {\" \"}\r\n          <Text fontWeight={600}>Made by {data.author}</Text>{\" \"}\r\n        </Link>\r\n        <Text fontWeight={600}>\r\n          Extension commands : {data.textSuggestion.map((a) => a + \", \")}\r\n        </Text>\r\n      </Flex>\r\n      <Button\r\n        onClick={\r\n          alreadyInstalled //If already installed, go to extension manager, if not, install it\r\n            ? () => navigate(`/extensionManager/${extensionId}`)\r\n            : () => navigate(`/storeInstall/${extensionId}`)\r\n        }\r\n        width={\"80%\"}\r\n      >\r\n        {alreadyInstalled ? \"Change settings\" : \"Install\"}\r\n      </Button>\r\n    </Flex>\r\n  );\r\n};\r\n","\r\nimport {\r\n  Flex,\r\n  Text,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  useDisclosure,\r\n  Button,\r\n  CircularProgress,\r\n  Link,\r\n  Heading,\r\n  ListItem,\r\n  Alert,\r\n  AlertIcon,\r\n  useToast,\r\n} from \"@chakra-ui/react\";\r\nimport { Fragment, useEffect, useState } from \"react\";\r\nimport { useNavigationType, useNavigate, useParams } from \"react-router-dom\";\r\nimport useSWR from \"swr\";\r\n\r\nconst { extensionApiURL } = window.admin.getConfig();\r\nexport default () => {\r\n  const toast = useToast();\r\n  const [currentlyInstalling, setCurrentlyInstalling] = useState(null);\r\n  const { isOpen, onOpen } = useDisclosure();\r\n  const navigate = useNavigate();\r\n  const { extensionId } = useParams();\r\n  const fetcher = (...args) => fetch(...args).then((res) => res.json());\r\n  const { data, err } = useSWR(`${extensionApiURL}/${extensionId}`, fetcher);\r\n  function installExtension() {\r\n    setCurrentlyInstalling(true);\r\n    window.admin\r\n      .installExtension(extensionId)\r\n      .then(async () => {\r\n        await new Promise((resolve) => setTimeout(resolve, 1000)); //Solve a strange bug. Don't ask why. SOmetimes, config store doesn't get updated at the right time. So we wait a bit.\r\n        setCurrentlyInstalling(false);\r\n        toast({\r\n          title: \"Success\",\r\n          description: \"Extension installed. Now configure a profile\",\r\n          status: \"success\",\r\n          duration: 5000,\r\n        });\r\n        navigate(`/profileNew/${extensionId}`);\r\n      })\r\n      .catch((e) => {\r\n        setCurrentlyInstalling(false);\r\n        toast({\r\n          title: \"Error\",\r\n          description: e.message,\r\n          status: \"error\",\r\n          duration: 5000,\r\n        });\r\n      });\r\n  }\r\n  function onClose() {\r\n    navigate(-1);\r\n  }\r\n  if (useNavigationType() == \"POP\") {\r\n    useEffect(() => {\r\n      navigate(-1);\r\n    }, []);\r\n    return (\r\n      <Flex align={\"center\"} justify={\"center\"}>\r\n        <Text>This page has already been called</Text>\r\n      </Flex>\r\n    );\r\n  } else if (err) {\r\n    return (\r\n      <Flex height={\"100%\"} justify={\"center\"} align={\"center\"}>\r\n        <Text textAlign={\"center\"} width={\"30%\"}>\r\n          We can't fetch Flish Api. Check your internet connection or\r\n          <Text fontWeight={600}>\r\n            {\" \"}\r\n            <Link href=\"https://status.flish.dev\" target=\"_blank\">\r\n              Flish Status\r\n            </Link>\r\n          </Text>\r\n        </Text>\r\n      </Flex>\r\n    );\r\n  } else if (!data) {\r\n    return (\r\n      <Flex\r\n        direction={\"column\"}\r\n        height={\"100%\"}\r\n        justify={\"center\"}\r\n        align={\"center\"}\r\n      >\r\n        <Text textAlign={\"center\"} width={\"30%\"}>\r\n          Loading...\r\n        </Text>\r\n        <CircularProgress isIndeterminate color=\"flish.700\" />\r\n      </Flex>\r\n    );\r\n  } else {\r\n    useEffect(() => {\r\n      onOpen();\r\n    }, []);\r\n    return (\r\n      <Fragment>\r\n        <Flex align={\"center\"} direction={\"column\"}>\r\n          <Heading>Installation status</Heading>\r\n          <CircularProgress visibility={currentlyInstalling} isIndeterminate />\r\n          <Text></Text>\r\n        </Flex>\r\n        <Modal\r\n          isCentered\r\n          closeOnOverlayClick={false}\r\n          closeOnEsc={false}\r\n          isOpen={isOpen}\r\n          onClose={onClose}\r\n        >\r\n          <ModalOverlay />\r\n          <ModalContent backgroundColor={\"flish.200\"}>\r\n            <ModalHeader fontWeight={700}>Permission Request</ModalHeader>\r\n            <ModalCloseButton />\r\n            <ModalBody display={\"flex\"} flexDirection={\"column\"} gap={2}>\r\n              <Text fontSize={14} color={\"flish.700\"} fontWeight={600}>\r\n                Each extension has a set of permission. Permissions listed below\r\n                are necessary for extension execution. However, if you don't\r\n                want to authorize the extension, you could go back and refuse.\r\n              </Text>\r\n              <Text fontSize={16} fontWeight={700}>\r\n                Permissions asked :{\" \"}\r\n              </Text>\r\n              {data.permissions.map((a) => (\r\n                <ListItem fontSize={14} key={a}>\r\n                  {explaination(a)}\r\n                </ListItem>\r\n              ))}\r\n              <Alert\r\n                backgroundColor={\"flish.300\"}\r\n                borderRadius={\"12px\"}\r\n                status=\"warning\"\r\n              >\r\n                <AlertIcon />\r\n                Be careful with extension permissions. Some could put your\r\n                computer at risk\r\n              </Alert>\r\n            </ModalBody>\r\n\r\n            <ModalFooter>\r\n              <Button variant={\"white\"} mr={3} onClick={onClose}>\r\n                I refuse\r\n              </Button>\r\n              <Button onClick={installExtension}>I accept</Button>\r\n            </ModalFooter>\r\n          </ModalContent>\r\n        </Modal>\r\n      </Fragment>\r\n    );\r\n  }\r\n};\r\n\r\nfunction explaination(a) {\r\n  if (a === \"fs\") {\r\n    return \"In order to read and write files, extension needs the fs permission\";\r\n  } else if (a === \"media\") {\r\n    return \"The media permission is required.\";\r\n  } else if (a === \"clipboard\") {\r\n    return \"In order to read and write to the clipboard, extension needs the clipboard permission.\";\r\n  } else if (a === \"notifications\") {\r\n    return \"In order to send notifications, extension needs the notifications permission.\";\r\n  } else if (a === \"geolocation\") {\r\n    return \"In order to access your location, extension needs the geolocation permission.\";\r\n  } else {\r\n    return ` Unrecognized permission : ${a}`;\r\n  }\r\n}\r\n","\r\nimport { useEffect, useState, Fragment } from \"react\";\r\nimport {\r\n  Flex,\r\n  Heading,\r\n  Alert,\r\n  Image,\r\n  AlertDescription,\r\n  AlertIcon,\r\n  Text,\r\n  Editable,\r\n  FormControl,\r\n  CircularProgress,\r\n  Input,\r\n  FormLabel,\r\n  FormHelperText,\r\n  FormErrorMessage,\r\n  Button,\r\n  Divider,\r\n  useToast,\r\n} from \"@chakra-ui/react\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\n\r\n//Wtf is JSX? Bug on bug on bug.\r\nexport default () => {\r\n  const { extensionId } = useParams();\r\n\r\n  const navigate = useNavigate();\r\n  const toast = useToast();\r\n  const [extension, setExtension] = useState<extension>();\r\n  const [FormValue, setFormValue]: [any, Function] = useState({\r\n    name: \"An awesome name\",\r\n    envVariable: {},\r\n  });\r\n  useEffect(() => {\r\n    (async () => {\r\n      await new Promise((resolve, reject) => {\r\n        setTimeout(() => {\r\n          resolve(void 0);\r\n        }, 1000);\r\n      });\r\n      const data = await window.admin.getExtension(extensionId);\r\n      setExtension(data);\r\n    })();\r\n  }, []);\r\n\r\n  if (extension === undefined || extension === null) {\r\n    //Case data is not loaded yet\r\n    return (\r\n      <Flex\r\n        gap={4}\r\n        height={\"100%\"}\r\n        direction={\"column\"}\r\n        justify={\"center\"}\r\n        align={\"center\"}\r\n\r\n      >\r\n        <CircularProgress color=\"flish.700\" isIndeterminate size={24} />\r\n        <Text fontWeight={700}>Loading page</Text>\r\n      </Flex>\r\n    );\r\n  } else {\r\n    return (\r\n      <Flex\r\n        height={\"100%\"}\r\n        margin={\"auto\"}\r\n        width={\"80%\"}\r\n        direction={\"column\"}\r\n        justify={\"center\"}\r\n        align={\"flex-start\"}\r\n\r\n      >\r\n        <Image\r\n          marginBottom={4}\r\n          src={extension.icon}\r\n          boxSize={12}\r\n          borderRadius={100}\r\n        />\r\n        <Heading\r\n          as=\"h1\"\r\n          marginBottom={8}\r\n          alignSelf={\"flex-start\"}\r\n          fontSize={24}\r\n        >\r\n          Create a new profile for{\" \"}\r\n          <Heading as=\"p\" fontSize={32} color={\"flish.700\"}>\r\n            {extension.name}\r\n          </Heading>\r\n        </Heading>\r\n        <FormControl\r\n          marginBottom={8}\r\n          isInvalid={FormValue.name === undefined || FormValue.name === \"\"}\r\n          isRequired\r\n        >\r\n          <FormLabel htmlFor=\"name\">Name</FormLabel>\r\n          <Input\r\n            id=\"name\"\r\n            value={FormValue.name}\r\n            onChange={(e) =>\r\n              setFormValue({ ...FormValue, name: e.target.value })\r\n            }\r\n            defaultValue={extension.name}\r\n          />\r\n          <FormHelperText>\r\n            The name used in the search bar. We recommend to choose a meaningful\r\n            name because you will type it every time you need to use this\r\n            profile\r\n          </FormHelperText>\r\n          <FormErrorMessage>Sorry but name can't be empty</FormErrorMessage>\r\n        </FormControl>\r\n        <Heading marginBottom={2} alignSelf={\"flex-start\"} fontSize={14}>\r\n          Configuration required by the extension\r\n        </Heading>\r\n        <Flex\r\n          overflowY={\"auto\"}\r\n          marginBottom={6}\r\n          gap={8}\r\n          height={\"100%\"}\r\n          width={\"100%\"}\r\n          direction={\"column\"}\r\n          backgroundColor={\"flish.300\"}\r\n          p={4}\r\n          borderRadius={\"12px\"}\r\n        >\r\n          {extension.envVariables.map((envVariable) => {\r\n            return (\r\n              <FormControl\r\n                isInvalid={\r\n                  FormValue.envVariable[envVariable.name] === undefined ||\r\n                  FormValue.envVariable[envVariable.name].length === 0\r\n                }\r\n                isRequired\r\n              >\r\n                <FormLabel htmlFor={envVariable.name}>\r\n                  {envVariable.name}\r\n                </FormLabel>\r\n                <Input\r\n                  defaultValue={envVariable.defaultValue}\r\n                  placeholder={envVariable.placeholder}\r\n                  id={envVariable.name}\r\n                  value={FormValue.envVariable[envVariable.name]}\r\n                  type={envVariable.needToBeEncrypted ? \"password\" : \"text\"}\r\n                  onChange={(e) => {\r\n                    const value = {\r\n                      ...FormValue,\r\n                      envVariable: {\r\n                        ...FormValue.envVariable,\r\n                        [envVariable.name]: e.target.value,\r\n                      },\r\n                    };\r\n                    setFormValue(value);\r\n                  }}\r\n                />\r\n                <FormHelperText>{envVariable.description}</FormHelperText>\r\n              </FormControl>\r\n            );\r\n          })}\r\n        </Flex>\r\n        <Button\r\n          onClick={() =>\r\n            handleSubmit(\r\n              toast,\r\n              FormValue.name,\r\n              extension.uuid,\r\n              FormValue.envVariable,\r\n              extension.envVariables,\r\n              navigate\r\n            )\r\n          }\r\n          width={\"100%\"}\r\n        >\r\n          Create a new profile\r\n        </Button>\r\n      </Flex>\r\n    );\r\n  }\r\n};\r\nasync function handleSubmit(\r\n  toast: Function,\r\n  name: string,\r\n  extensionId: string,\r\n  storedValue: any,\r\n  extensionVariable: envVariables[],\r\n  navigate: Function\r\n) {\r\n  \r\n  let dataToSaved: parametersProfile[] = [];\r\n  let toPush = false; //In case an error is detected in form validation, function stops sending data to the backend\r\n  for (let i = 0; i < extensionVariable.length; i++) {\r\n    const element = extensionVariable[i];\r\n    if (storedValue[element.name] === undefined) {\r\n      toast({\r\n        title: \"Error\",\r\n        description: `${element.name} is not defined`,\r\n        status: \"error\",\r\n      });\r\n      toPush = false;\r\n      return;\r\n    }\r\n    dataToSaved.push({\r\n      name: element.name,\r\n      value: storedValue[element.name],\r\n      needToBeEncrypted: element.needToBeEncrypted,\r\n    });\r\n    toPush = true;\r\n  }\r\n  console.log(dataToSaved);\r\n  \r\n  if (toPush) {\r\n    console.log(extensionId, name, dataToSaved);\r\n\r\n    window.admin\r\n      .createInstance(extensionId, name, dataToSaved)\r\n      .then(() => {\r\n        toast({\r\n          title: \"Success\",\r\n          description: \"Profile created\",\r\n          status: \"success\",\r\n        });\r\n        navigate(\"/extensionManager/\" + extensionId);\r\n      })\r\n      .catch((error: any) => {\r\n        toast({\r\n          title: \"Error\",\r\n          description: error.message,\r\n          status: \"error\",\r\n        });\r\n        console.error(error);\r\n      });\r\n  }\r\n}\r\ninterface parametersProfile {\r\n  name: string;\r\n  value: string;\r\n  needToBeEncrypted: boolean;\r\n}\r\n\r\ninterface envVariables {\r\n  /** In the form, name will be the label. Also, it will be the identifier when an extension call the env variable API */\r\n  name: string;\r\n  /** In the form, this will influence appearance (using a checkbox e.g.). Default to string */\r\n  type?: \"string\" /* | \"number\" | \"boolean\"; */;\r\n  /** If required, user can't skip the input. Label will have a small red star */\r\n  /* required?: boolean; */\r\n  /** What would be shown below the input */\r\n  description?: string;\r\n  /** A default value to fallback if no input. If not specified in boolean, fallback to false */\r\n  defaultValue?: any;\r\n  /** Value to save */\r\n  value?: string;\r\n  /** In case of \"number\" or \"string\", the placeholder is what would be shown in the input until nothing is written */\r\n  placeholder?: string;\r\n  /** If set to true, value will be saved in keychain (or platform equivalent for linux or windows) */\r\n  needToBeEncrypted: boolean;\r\n}\r\n\r\ninterface extension {\r\n  /** The Unique ID of the extension generated by the server */\r\n  uuid: string;\r\n  /** The name of the extension */\r\n  name: string;\r\n  /** The description of the extension */\r\n  description: string;\r\n  /** The download URL of the extension */\r\n  downloadURL: string;\r\n  /** The version of the extension */\r\n  version: string;\r\n  /** Hash over extension files  */\r\n  hash: string;\r\n  /** The author of the extension */\r\n  author?: string;\r\n  /** The url of the extension */\r\n  link: string;\r\n  /** Absolute path to the extension */\r\n  path: string;\r\n  /** The mode of the app | search => app is shown but search bar is still shown, normal => on enter pressed, focus is given to extension and search bar disappear, noArgument => when choosen, no argument could be given */\r\n  mode?: \"search\" | \"normal\" | \"noArgument\" | \"headless\";\r\n  /** The HTML file name to load in the window */\r\n  entry?: string;\r\n  /** The icon of the extension */\r\n  icon: string;\r\n  /** An app could have multiple functionnalities. These are suggestion offered by the interface (e.g /notion search => If you want search to be recommend, put it in the array)  */\r\n  textSuggestion?: string[];\r\n  /** Permissions required by the extension. Specify the capabilities of the extension (could be empty)  */\r\n  permissions: (\r\n    | \"notifications\"\r\n    | \"clipboard\"\r\n    | \"geolocation\"\r\n    | \"media\"\r\n    | \"fs\"\r\n  )[];\r\n  /** Array of environment Variable required by the extension. User will be prompt answering them (could be empty) */\r\n  envVariables: envVariables[];\r\n  /** If the extension is premium */\r\n  premium?: boolean;\r\n}\r\n","import { useEffect, useState, Fragment } from \"react\";\r\nimport {\r\n  Flex,\r\n  Heading,\r\n  Alert,\r\n  Image,\r\n  AlertDescription,\r\n  AlertIcon,\r\n  Text,\r\n  Editable,\r\n  FormControl,\r\n  CircularProgress,\r\n  Input,\r\n  FormLabel,\r\n  FormHelperText,\r\n  FormErrorMessage,\r\n  Button,\r\n  Divider,\r\n  useToast,\r\n} from \"@chakra-ui/react\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\n\r\nexport default () => {\r\n  const { id } = useParams();\r\n  const [Extension, setExtension] = useState<extension>();\r\n  const [FormValue, setFormValue]: [any, Function] = useState({\r\n    name: \"An awesome name\",\r\n    envVariable: {},\r\n  });\r\n  const navigate = useNavigate();\r\n  const toast = useToast();\r\n  useEffect(() => {\r\n    (async () => {\r\n      const { extension, instance } = await window.admin.getInstance(id);\r\n      setExtension(extension);\r\n      setFormValue({\r\n        ...FormValue,\r\n        name: instance.name,\r\n      });\r\n      const envVariable = await window.admin.getEnvVariable(id);\r\n      let data = {...FormValue};\r\n      for (const key in envVariable) {\r\n          if (Object.prototype.hasOwnProperty.call(envVariable, key)) {\r\n              const element = envVariable[key];\r\n              data.envVariable[key] = element;\r\n              console.log(key, element);\r\n              \r\n          }\r\n      }\r\n      setFormValue(data);\r\n    })();\r\n  }, []);\r\n\r\n  if (Extension === undefined || Extension === null) {\r\n    return (\r\n      <Flex\r\n        gap={4}\r\n        direction={\"column\"}\r\n        justify={\"center\"}\r\n        height={\"100%\"}\r\n        align={\"center\"}\r\n      >\r\n        <CircularProgress color=\"flish.700\" isIndeterminate size={24} />\r\n        <Text fontSize={18} fontWeight={600}>\r\n          👋 We are loading data...\r\n        </Text>\r\n        <Text fontSize={14}>\r\n          If this takes too long, profile might be deleted.\r\n        </Text>\r\n        <Button size={\"sm\"} onClick={() => navigate(-1)}>\r\n          Go back\r\n        </Button>\r\n      </Flex>\r\n    );\r\n  } else {\r\n      console.log(FormValue);\r\n      \r\n    return (\r\n      <Flex width={\"80%\"} height={\"100%\"} overflowY={\"auto\"} margin={\"auto\"} direction={\"column\"} p={5} gap={\"32px\"}>\r\n        <Heading fontWeight={600} color={\"blackAlpha.600\"} fontSize={24}>\r\n          Update profile for extension{\" \"}\r\n          <Heading as=\"p\" fontSize={32} color={\"flish.700\"}>\r\n            {Extension.name}\r\n          </Heading>\r\n        </Heading>\r\n        <FormControl\r\n          isInvalid={FormValue.name === undefined || FormValue.name === \"\"}\r\n          isRequired\r\n        >\r\n          <FormLabel htmlFor=\"name\">Name</FormLabel>\r\n          <Input\r\n            id=\"name\"\r\n            value={FormValue.name}\r\n            onChange={(e) => {\r\n              setFormValue({\r\n                ...FormValue,\r\n                name: e.target.value,\r\n              });\r\n            }}\r\n          />\r\n          <FormHelperText>\r\n            The name used in the search bar. We recommend to choose a meaningful\r\n            name because you will type it every time you need to use this\r\n            profile\r\n          </FormHelperText>\r\n          <FormErrorMessage>Sorry but name can't be empty</FormErrorMessage>\r\n        </FormControl>\r\n        <Flex\r\n          overflowY={\"auto\"}\r\n          marginBottom={6}\r\n          gap={8}\r\n          height={\"100%\"}\r\n          width={\"100%\"}\r\n          direction={\"column\"}\r\n          backgroundColor={\"flish.300\"}\r\n          p={4}\r\n          borderRadius={\"12px\"}\r\n        >\r\n          {Extension.envVariables.map((envVariable) => {\r\n            return (\r\n              <FormControl\r\n                isInvalid={\r\n                  FormValue.envVariable[envVariable.name] === undefined ||\r\n                  FormValue.envVariable[envVariable.name].length === 0\r\n                }\r\n                isRequired\r\n              >\r\n                <FormLabel htmlFor={envVariable.name}>\r\n                  {envVariable.name}\r\n                </FormLabel>\r\n                <Input\r\n                  placeholder={envVariable.placeholder}\r\n                  id={envVariable.name}\r\n                  value={FormValue.envVariable[envVariable.name]}\r\n                  type={envVariable.needToBeEncrypted ? \"password\" : \"text\"}\r\n                  onChange={(e) => {\r\n                    const value = {\r\n                      ...FormValue,\r\n                      envVariable: {\r\n                        ...FormValue.envVariable,\r\n                        [envVariable.name]: e.target.value,\r\n                      },\r\n                    };\r\n                    setFormValue(value);\r\n                  }}\r\n                />\r\n                <FormHelperText>{envVariable.description}</FormHelperText>\r\n              </FormControl>\r\n            );\r\n          })}\r\n        </Flex>\r\n        <Button\r\n          onClick={() =>\r\n            handleSubmit(\r\n              toast,\r\n              FormValue.name,\r\n              id,\r\n              FormValue.envVariable,\r\n              Extension.envVariables,\r\n              navigate\r\n            )\r\n          }\r\n          width={\"100%\"}\r\n        >\r\n          Update profile\r\n        </Button>\r\n      </Flex>\r\n    );\r\n  }\r\n};\r\n\r\n\r\nasync function handleSubmit(\r\n    toast: Function,\r\n    name: string,\r\n    instanceId: string|undefined,\r\n    storedValue: any,\r\n    extensionVariable: envVariables[],\r\n    navigate: Function\r\n  ) {\r\n    \r\n    let dataToSaved: parametersProfile[] = [];\r\n    let toPush = false; //In case an error is detected in form validation, function stops sending data to the backend\r\n    for (let i = 0; i < extensionVariable.length; i++) {\r\n      const element = extensionVariable[i];\r\n      if (storedValue[element.name] === undefined) {\r\n        toast({\r\n          title: \"Error\",\r\n          description: `${element.name} is not defined`,\r\n          status: \"error\",\r\n        });\r\n        toPush = false;\r\n        return;\r\n      }\r\n      dataToSaved.push({\r\n        name: element.name,\r\n        value: storedValue[element.name],\r\n        needToBeEncrypted: element.needToBeEncrypted,\r\n      });\r\n      toPush = true;\r\n    }\r\n\r\n    if (toPush) {\r\n  \r\n      window.admin\r\n        .updateInstance(instanceId, {name:name, envVariable:dataToSaved})\r\n        .then(() => {\r\n          toast({\r\n            title: \"Success\",\r\n            description: \"Profile updated\",\r\n            status: \"success\",\r\n          });\r\n          navigate(\"/extensionManager\");\r\n        })\r\n        .catch((error: any) => {\r\n          toast({\r\n            title: \"Error\",\r\n            description: error.message,\r\n            status: \"error\",\r\n          });\r\n          console.error(error);\r\n        });\r\n    }\r\n  }\r\n\r\ninterface parametersProfile {\r\n  name: string;\r\n  value: string;\r\n  needToBeEncrypted: boolean;\r\n}\r\n\r\ninterface envVariables {\r\n  /** In the form, name will be the label. Also, it will be the identifier when an extension call the env variable API */\r\n  name: string;\r\n  /** In the form, this will influence appearance (using a checkbox e.g.). Default to string */\r\n  type?: \"string\" /* | \"number\" | \"boolean\"; */;\r\n  /** If required, user can't skip the input. Label will have a small red star */\r\n  /* required?: boolean; */\r\n  /** What would be shown below the input */\r\n  description?: string;\r\n  /** A default value to fallback if no input. If not specified in boolean, fallback to false */\r\n  defaultValue?: any;\r\n  /** Value to save */\r\n  value?: string;\r\n  /** In case of \"number\" or \"string\", the placeholder is what would be shown in the input until nothing is written */\r\n  placeholder?: string;\r\n  /** If set to true, value will be saved in keychain (or platform equivalent for linux or windows) */\r\n  needToBeEncrypted: boolean;\r\n}\r\n\r\ninterface extension {\r\n  /** The Unique ID of the extension generated by the server */\r\n  uuid: string;\r\n  /** The name of the extension */\r\n  name: string;\r\n  /** The description of the extension */\r\n  description: string;\r\n  /** The download URL of the extension */\r\n  downloadURL: string;\r\n  /** The version of the extension */\r\n  version: string;\r\n  /** Hash over extension files  */\r\n  hash: string;\r\n  /** The author of the extension */\r\n  author?: string;\r\n  /** The url of the extension */\r\n  link: string;\r\n  /** Absolute path to the extension */\r\n  path: string;\r\n  /** The mode of the app | search => app is shown but search bar is still shown, normal => on enter pressed, focus is given to extension and search bar disappear, noArgument => when choosen, no argument could be given */\r\n  mode?: \"search\" | \"normal\" | \"noArgument\" | \"headless\";\r\n  /** The HTML file name to load in the window */\r\n  entry?: string;\r\n  /** The icon of the extension */\r\n  icon: string;\r\n  /** An app could have multiple functionnalities. These are suggestion offered by the interface (e.g /notion search => If you want search to be recommend, put it in the array)  */\r\n  textSuggestion?: string[];\r\n  /** Permissions required by the extension. Specify the capabilities of the extension (could be empty)  */\r\n  permissions: (\r\n    | \"notifications\"\r\n    | \"clipboard\"\r\n    | \"geolocation\"\r\n    | \"media\"\r\n    | \"fs\"\r\n  )[];\r\n  /** Array of environment Variable required by the extension. User will be prompt answering them (could be empty) */\r\n  envVariables: envVariables[];\r\n  /** If the extension is premium */\r\n  premium?: boolean;\r\n}\r\n","import {\r\n  Flex,\r\n  Heading,\r\n  Text,\r\n  FormControl,\r\n  Input,\r\n  FormLabel,\r\n  FormHelperText,\r\n  UnorderedList,\r\n  ListItem,\r\n  Link,\r\n  Code,\r\n  Button,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  useToast,\r\n} from \"@chakra-ui/react\";\r\nimport { ExternalLinkIcon } from \"@chakra-ui/icons/\";\r\nimport { useState, useEffect } from \"react\";\r\nexport default () => {\r\n  const [Shortcut, setShortcut] = useState(\"ALT+P\");\r\n  const toast = useToast();\r\n  //u => User analytics | s => Security analytics\r\n  const [U, setU] = useState(false);\r\n  const [S, setS] = useState(false);\r\n  useEffect(() => {\r\n    (async () => {\r\n      const { shortcut } = await window.admin.getSettings();\r\n      setShortcut(shortcut);\r\n    })();\r\n  }, []);\r\n  return (\r\n    <Flex\r\n      gap={8}\r\n      direction=\"column\"\r\n      height=\"100%\"\r\n      width={\"80%\"}\r\n      margin={\"auto\"}\r\n      p={5}\r\n    >\r\n      <Heading>Settings</Heading>\r\n      <FormControl marginTop={\"32px\"}>\r\n        <FormLabel htmlFor=\"name\">Shortcut</FormLabel>\r\n        <Input\r\n          id=\"name\"\r\n          value={Shortcut}\r\n          onChange={(e) => setShortcut(e.target.value)}\r\n        />\r\n        <FormHelperText>\r\n          Shortcut to open the search bar. A restart is required to apply.\r\n        </FormHelperText>\r\n        <FormHelperText>\r\n          Syntax : <Code>{`[modfier] + [key]`}</Code> <br />\r\n          Example : <Code>{`ALT + P`}</Code>\r\n          <FormHelperText>\r\n            To know available shortcut, check{\" \"}\r\n            <Link\r\n              color={\"flish.700\"}\r\n              href=\"https://electronjs.org/docs/api/accelerator\"\r\n              isExternal\r\n            >\r\n              Electron documentation <ExternalLinkIcon />\r\n            </Link>\r\n          </FormHelperText>\r\n        </FormHelperText>\r\n      </FormControl>\r\n      <Flex align={\"center\"} justify={\"space-between\"}>\r\n        <Text fontSize={14} fontWeight={700}>\r\n          User analytics\r\n        </Text>\r\n        <Button onClick={() => setU(true)} size={\"sm\"}>\r\n          Configure\r\n        </Button>\r\n      </Flex>\r\n      <Flex align={\"center\"} justify={\"space-between\"}>\r\n        <Text fontSize={14} fontWeight={700}>\r\n          Security analytics\r\n        </Text>\r\n        <Button onClick={() => setS(true)} size={\"sm\"}>\r\n          Configure\r\n        </Button>\r\n      </Flex>\r\n      <Button\r\n        marginTop={\"auto\"}\r\n        onClick={() => {\r\n          window.admin.setShortcut(Shortcut).then(() => {\r\n            toast({\r\n              title: \"Shortcut updated to \" + Shortcut,\r\n              description: \"Restart the app to apply\",\r\n              status: \"success\",\r\n              duration: 9000,\r\n              isClosable: true,\r\n            });\r\n          });\r\n        }}\r\n        variant={\"white\"}\r\n      >\r\n        Save\r\n      </Button>\r\n      <Modal\r\n        closeOnOverlayClick={false}\r\n        closeOnEsc={false}\r\n        isCentered\r\n        isOpen={U}\r\n        onClose={() => setU(false)}\r\n      >\r\n        <ModalOverlay />\r\n        <ModalContent backgroundColor={\"flish.300\"}>\r\n          <ModalHeader>Would you like to enable user analytics ?</ModalHeader>\r\n          <ModalBody>\r\n            <Heading fontSize={16}>\r\n              We value your privacy : data is anonymous\r\n            </Heading>\r\n            <Text marginTop={2} fontSize={14} color={\"blackAlpha.700\"}>\r\n              We know that most privacy policy looks boring.{\" \"}\r\n              <Text as=\"span\" color={\"flish.700\"}>\r\n                We just kindly ask you to enable user analytics. This helps us\r\n                building a better product.{\" \"}\r\n              </Text>{\" \"}\r\n              We don't use Google analytics (or GAFAM like things) so that data\r\n              stay on our server. If you want to know what we do with data, :{\" \"}\r\n              <Link href=\"https://flish.dev/blog\" isExternal>\r\n                check our blog <ExternalLinkIcon />\r\n              </Link>\r\n            </Text>\r\n            <Heading marginBottom={2} marginTop={6} fontSize={16}>\r\n              We will only collect the following data :\r\n            </Heading>\r\n\r\n            <UnorderedList fontSize={14} color={\"blackAlpha.700\"}>\r\n              <ListItem>Screen size</ListItem>\r\n              <ListItem>Platform (windows, macOS, Linux)</ListItem>\r\n              <ListItem>Country</ListItem>\r\n              <ListItem>App version</ListItem>\r\n              <ListItem>\r\n                Some events (App started, extension installed, extension\r\n                launched, etc.)\r\n              </ListItem>\r\n            </UnorderedList>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button\r\n              fontWeight={300}\r\n              backgroundColor={\"transparent\"}\r\n              mr={3}\r\n              onClick={() => {\r\n                window.admin.setTelemetry(false);\r\n                setU(!U);\r\n              }}\r\n            >\r\n              I refuse\r\n            </Button>\r\n            <Button\r\n              onClick={() => {\r\n                window.admin.setTelemetry(true);\r\n                setU(!U);\r\n              }}\r\n              backgroundColor={\"flish.500\"}\r\n              autoFocus\r\n              variant=\"ghost\"\r\n            >\r\n              I accept\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n      <Modal\r\n        closeOnOverlayClick={false}\r\n        closeOnEsc={false}\r\n        isCentered\r\n        isOpen={S}\r\n        onClose={() => setS(false)}\r\n      >\r\n        <ModalOverlay />\r\n        <ModalContent backgroundColor={\"flish.300\"}>\r\n          <ModalHeader>\r\n            Would you like to enable security analytics ?\r\n          </ModalHeader>\r\n          <ModalBody>\r\n            <Heading fontSize={16}>\r\n              We value your privacy and also your security\r\n            </Heading>\r\n            <Text marginTop={2} fontSize={14} color={\"blackAlpha.700\"}>\r\n              Each extension has a set of permissions. We extensively inspect\r\n              each extension before any publish. However, to prevent any\r\n              malicious use, we log each API call from an extension. We then\r\n              analyse this data to see if there is any suspicious activity.\r\n              Accepting this will allow us to enhance security and help us to\r\n              improve our product.\r\n            </Text>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button\r\n              fontWeight={300}\r\n              backgroundColor={\"transparent\"}\r\n              mr={3}\r\n              onClick={() => {\r\n                window.admin.setSecurityLog(false);\r\n                setS(!S);\r\n              }}\r\n            >\r\n              I refuse\r\n            </Button>\r\n            <Button\r\n              onClick={() => {\r\n                window.admin.setSecurityLog(true);\r\n                setS(!S);\r\n              }}\r\n              backgroundColor={\"flish.500\"}\r\n              autoFocus\r\n              variant=\"ghost\"\r\n            >\r\n              I accept\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </Flex>\r\n  );\r\n};\r\n","import {\r\n  Flex,\r\n  Heading,\r\n  Alert,\r\n  AlertDescription,\r\n  AlertIcon,\r\n  Text,\r\n  FormControl,\r\n  Input,\r\n  FormLabel,\r\n  FormHelperText,\r\n  FormErrorMessage,\r\n  Button,\r\n  Link,\r\n  Textarea,\r\n  useToast,\r\n  Checkbox,\r\n} from \"@chakra-ui/react\";\r\nimport { ExternalLinkIcon } from \"@chakra-ui/icons\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nexport default () => {\r\n  const [URLValue, setURLValue] = useState(\"http://localhost:3000\");\r\n  const [URLInvalid, setURLInvalid] = useState(false);\r\n  const [mockAPI, setMockAPI] = useState(\"{}\");\r\n  const [mockAPIInvalid, setMockAPIInvalid] = useState(false);\r\n  const [Query, setQuery] = useState(\"\");\r\n  const [Headless, setHeadless] = useState(false);\r\n\r\n  const toast = useToast();\r\n  useEffect(() => {\r\n    (async () => {\r\n      const url = await window.admin.getURLDevMode();\r\n      if (url) {\r\n        setURLValue(url);\r\n      }\r\n      const mockDevMode = await window.admin.getMockDevMode();\r\n      if (mockDevMode) {\r\n        setMockAPI(JSON.stringify(mockDevMode, null, 2));\r\n      }\r\n      const query = await window.admin.getQueryDevMode();\r\n      if (query) {\r\n        setQuery(query);\r\n      }\r\n      const headless = await window.admin.getHeadlessDevMode();\r\n      if (headless) {\r\n        setHeadless(headless);\r\n      }\r\n    })();\r\n  }, []);\r\n  const saveData = async () => {\r\n    if (!URLInvalid && !mockAPIInvalid) {\r\n      await window.admin.setURLDevMode(URLValue).catch((a) => {\r\n        toast({\r\n          status: \"error\",\r\n          title: \"Error\",\r\n          description: a.message,\r\n          duration: 5000,\r\n        });\r\n      });\r\n      await window.admin.setMockDevMode(mockAPI).catch((a) => {\r\n        toast({\r\n          status: \"error\",\r\n          title: \"Error\",\r\n          description: a.message,\r\n          duration: 5000,\r\n        });\r\n      });\r\n      await window.admin.setQueryDevMode(Query).catch((a) => {\r\n        toast({\r\n          status: \"error\",\r\n          title: \"Error\",\r\n          description: a.message,\r\n          duration: 5000,\r\n        });\r\n      });\r\n      await window.admin.setHeadlessDevMode(Headless).catch((a) => {\r\n        toast({\r\n          status: \"error\",\r\n          title: \"Error\",\r\n          description: a.message,\r\n          duration: 5000,\r\n        });\r\n      });\r\n      toast({\r\n        status: \"success\",\r\n        title: \"Success\",\r\n        description: \"Saved\",\r\n        duration: 5000,\r\n      });\r\n    } else {\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Invalid URL or Mock API\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleURLChange = (e) => {\r\n    const url = e.target.value;\r\n    setURLValue(url);\r\n    if (url.startsWith(\"http://\") || url.startsWith(\"https://\")) {\r\n      setURLInvalid(false);\r\n    } else {\r\n      setURLInvalid(true);\r\n    }\r\n  };\r\n  const handleMockAPIChange = (e) => {\r\n    const mockAPI = e.target.value;\r\n    setMockAPI(mockAPI);\r\n    try {\r\n      JSON.parse(mockAPI);\r\n      setMockAPIInvalid(false);\r\n    } catch (error) {\r\n      setMockAPIInvalid(true);\r\n    }\r\n  };\r\n  return (\r\n    <Flex\r\n      paddingTop={\"48px\"}\r\n      margin={\"auto\"}\r\n      direction={\"column\"}\r\n      width={\"85%\"}\r\n      height={\"100%\"}\r\n      overflowY={\"auto\"}\r\n      p={2}\r\n    >\r\n      <Heading marginBottom={\"32px\"} fontSize={32}>\r\n        Debug an extension\r\n      </Heading>\r\n      <Alert backgroundColor={\"flish.300\"} status=\"info\">\r\n        <AlertIcon color={\"flish.600\"} />\r\n        <AlertDescription\r\n          fontSize={14}\r\n          fontWeight={500}\r\n          color={\"blackAlpha.700\"}\r\n        >\r\n          Restart is needed to apply changes.\r\n        </AlertDescription>\r\n      </Alert>\r\n      <FormControl isInvalid={URLInvalid} marginTop={8}>\r\n        <FormLabel htmlFor=\"url\">URL</FormLabel>\r\n        <Input\r\n          value={URLValue}\r\n          onChange={handleURLChange}\r\n          id=\"url\"\r\n          placeholder=\"https://localhost:8080\"\r\n        />\r\n        <FormHelperText>\r\n          Extension are loaded from a remote URL. Default to localhost:3000\r\n        </FormHelperText>\r\n        <FormErrorMessage>\r\n          This can't be empty or not starting by http:// or https://\r\n        </FormErrorMessage>\r\n      </FormControl>\r\n      <FormControl marginTop={4}>\r\n        <FormLabel htmlFor=\"Query\">Query</FormLabel>\r\n        <Input\r\n          value={Query}\r\n          onChange={(e) => setQuery(e.target.value)}\r\n          id=\"Query\"\r\n          placeholder=\"Where is Mjolnir ?\"\r\n        />\r\n        <FormHelperText>\r\n          Before opening an extension, you can write a sentence to search for.\r\n          This replaces the default search. Default to \" \"\r\n        </FormHelperText>\r\n      </FormControl>\r\n      <FormControl marginTop={4}>\r\n        <FormLabel htmlFor=\"Query\">Headless</FormLabel>\r\n        <Checkbox isChecked={Headless} onChange={() => setHeadless(!Headless)}>\r\n          Should the extension be in headless mode ?\r\n        </Checkbox>\r\n        <FormHelperText>\r\n          Some extensions could be in headless mode. They can be considered as a\r\n          browser without interface. You can still access html and css but they\r\n          won't be displayed. Default to false\r\n        </FormHelperText>\r\n      </FormControl>\r\n      <FormControl isInvalid={mockAPIInvalid} marginTop={4}>\r\n        <FormLabel htmlFor=\"url\">Mock configuration</FormLabel>\r\n        <Textarea\r\n          backgroundColor={\"flish.400\"}\r\n          placeholder='{\"apiKey\":\"abcdefghij...\", \"apiSecret\":\"abcdefghij...\"}'\r\n          value={mockAPI}\r\n          onChange={handleMockAPIChange}\r\n        />\r\n        <FormHelperText>\r\n          To emulate environment variable of the extension, you could use a JSON\r\n          object representing your configuration. The key represents the name of\r\n          the variable and the value represents the value. Default to {\"{}\"}\r\n        </FormHelperText>\r\n        <FormErrorMessage>This should be a valid JSON object.</FormErrorMessage>\r\n      </FormControl>\r\n      <Alert marginTop={\"auto\"} backgroundColor={\"flish.300\"} status=\"info\">\r\n        <AlertIcon color={\"flish.600\"} />\r\n        <AlertDescription\r\n          fontSize={14}\r\n          fontWeight={500}\r\n          color={\"blackAlpha.700\"}\r\n        >\r\n          An extension in debug mode has access to all permissions without\r\n          restriction. Be careful !\r\n          <br />\r\n          You can only have one extension in debug mode at a time.\r\n          <br />\r\n          We recommend looking at the{\" \"}\r\n          <Link color={\"flish.700\"} href=\"https://flish.dev/docs\">\r\n            documentation <ExternalLinkIcon />\r\n          </Link>{\" \"}\r\n          to learn\r\n        </AlertDescription>\r\n      </Alert>\r\n      <Button\r\n        isDisabled={mockAPIInvalid || URLInvalid}\r\n        marginTop={4}\r\n        width={\"100%\"}\r\n        onClick={saveData}\r\n      >\r\n        {URLInvalid || mockAPIInvalid ? \"Invalid\" : \"Save\"}\r\n      </Button>\r\n    </Flex>\r\n  );\r\n};\r\n","/*\n * File: \\src\\index.tsx\n * Project: configuration\n * Created Date: Monday December 13th 2021\n * Author: Julien Cagniart\n * -----\n * Last Modified: 15/12/2021 20:53\n * Modified By: Julien Cagniart\n * -----\n * Copyright (c) 2021 Julien - juliencagniart40@gmail.com\n * -----\n * _______ _ _      _                 _             \n(_______) (_)    | |               | |            \n _____  | |_  ___| | _           _ | | ____ _   _ \n|  ___) | | |/___) || \\         / || |/ _  ) | | |\n| |     | | |___ | | | |   _   ( (_| ( (/ / \\ V / \n|_|     |_|_(___/|_| |_|  (_)   \\____|\\____) \\_/  \n                                                   \n * Purpose of this file : \n *  Link to documentation associated with this file : (empty) \n */\n\nimport * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport { HashRouter, Routes, Route } from \"react-router-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { ChakraProvider, Box } from \"@chakra-ui/react\";\nimport flishTheme from \"@flish/chakra-theme\";\nimport Layout from \"./components/layout\";\nimport {\n  Accueil,\n  ExtensionManager,\n  ExtensionManagerId,\n  ExtensionStore,\n  ExtensionStoreId,\n  InstallationStatus,\n  ProfileNew,\n  ProfileUpdate,\n  SettingsPage,\n  Dev\n} from \"./pages/index\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider theme={flishTheme}>\n      <HashRouter>\n        <Layout>\n          <Routes>\n            <Route path=\"/\" element={<Accueil />} /* Extension store Page*/ />\n            <Route path=\"extensionManager\" element={<ExtensionManager />} />\n            <Route\n              path=\"extensionManager/:extensionId\"\n              element={<ExtensionManagerId />}\n            />\n            <Route path=\"store\" element={<ExtensionStore />} />\n            <Route path=\"store/:extensionId\" element={<ExtensionStoreId />} />\n            <Route\n              path=\"storeInstall/:extensionId\"\n              element={<InstallationStatus />}\n            />\n            <Route path=\"profileNew/:extensionId\" element={<ProfileNew />} />\n            <Route path=\"profile/:id\" element={<ProfileUpdate />} />\n            <Route path=\"settings\" element={<SettingsPage />} />\n            <Route path=\"dev\" element={<Dev />} />\n          </Routes>\n        </Layout>\n      </HashRouter>\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}